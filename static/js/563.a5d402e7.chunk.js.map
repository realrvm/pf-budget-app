{"version":3,"file":"static/js/563.a5d402e7.chunk.js","mappings":"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","sources":["components/BudgetCard.tsx","hooks/useAppContext.ts","components/AddBudgetModal.tsx","components/AddExpenseModal.tsx","components/ViewExpenseModal.tsx","components/TotalBudgetCard.tsx","components/DefaultBudgetCard.tsx","components/ConfirmationModal.tsx","pages/Budget.tsx"],"sourcesContent":["import { Card, Stack, ProgressBar, Button } from \"react-bootstrap\";\n\nimport { formatToRoubles } from \"../utils/utils\";\n\ninterface BudgetCardProps {\n    name: string;\n    amount: number;\n    max?: number;\n    onAddExpenseClick?: () => void;\n    onViewExpenseClick?: () => void;\n    hideButtons?: boolean;\n}\n\nconst BudgetCard = ({ name, amount, max, onAddExpenseClick, onViewExpenseClick, hideButtons }: BudgetCardProps) => {\n    const getCardBGColor = (amount: number, max: number = 0) => {\n        const [danger, light, opacity] = [\"bg-danger\", \"bg-light\", \"bg-opacity-10\"];\n        return max && amount > max ? `${danger} ${opacity}` : light;\n    };\n\n    const getPBVariant = (amount: number, max: number) => {\n        const ratio = amount / max;\n        if (ratio < 0.5) return \"primary\";\n        if (ratio < 0.75) return \"warning\";\n        return \"danger\";\n    };\n\n    return (\n        <Card className={getCardBGColor(amount, max)}>\n            <Card.Body>\n                <Card.Title className=\"d-flex justify-content-berween align-items-baseline fw-normal mb-3\">\n                    <div className=\"me-2\">{name}</div>\n                    <div className=\"d-flex align-items-baseline ms-auto\">\n                        {formatToRoubles.format(amount)}\n                        {max && `/ `}{\" \"}\n                        {max && <span className=\"text-muted fs-6 ms-1\">{formatToRoubles.format(max)}</span>}\n                    </div>\n                </Card.Title>\n                {max && (\n                    <ProgressBar\n                        className=\"rounded-pill\"\n                        variant={getPBVariant(amount, max)}\n                        min={0}\n                        max={max}\n                        now={amount}\n                    ></ProgressBar>\n                )}\n                {!hideButtons && (\n                    <Stack direction=\"horizontal\" gap={2} className=\"mt-4\">\n                        <Button variant=\"outline-primary\" className=\"ms-auto\" onClick={onAddExpenseClick}>\n                            Потратить\n                        </Button>\n                        <Button variant=\"outline-secondary\" onClick={onViewExpenseClick}>\n                            Подробнее\n                        </Button>\n                    </Stack>\n                )}\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default BudgetCard;\n","import { useContext } from \"react\";\n\nimport { AppContext } from \"../context/AppContext\";\n\nexport const useAppContext = () => useContext(AppContext);\n","import { useRef } from \"react\";\n\nimport { Modal, Form, Button } from \"react-bootstrap\";\n\nimport { useAppContext } from \"../hooks/useAppContext\";\n\nimport { AddModalProps } from \"../types/types\";\n\nconst AddBudgetModal = ({ show, handleClose }: AddModalProps) => {\n    // использование контекста\n    const { addBudget } = useAppContext();\n\n    // refs\n    const nameRef = useRef<HTMLInputElement>({} as HTMLInputElement);\n    const maxRef = useRef<HTMLInputElement>({} as HTMLInputElement);\n\n    const handleSubmit = (element: React.FormEvent<HTMLFormElement>) => {\n        element.preventDefault();\n        addBudget({\n            name: nameRef.current.value,\n            max: parseInt(maxRef.current.value),\n        });\n        handleClose();\n    };\n\n    return (\n        <Modal show={show} onHide={handleClose}>\n            <Form onSubmit={handleSubmit}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Новая категория</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form.Group className=\"mb-3\" controlId=\"name\">\n                        <Form.Label>Название</Form.Label>\n                        <Form.Control ref={nameRef} type=\"text\" required />\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"maximum\">\n                        <Form.Label>Максимальные затраты</Form.Label>\n                        <Form.Control ref={maxRef} type=\"number\" required min={0} step={10} />\n                    </Form.Group>\n                    <div className=\"d-flex justify-content-end\">\n                        <Button variant=\"primary\" type=\"submit\">\n                            Добавить\n                        </Button>\n                    </div>\n                </Modal.Body>\n            </Form>\n        </Modal>\n    );\n};\n\nexport default AddBudgetModal;\n","import { useRef } from \"react\";\n\nimport { useAppContext } from \"../hooks/useAppContext\";\n\nimport { Modal, Form, Button } from \"react-bootstrap\";\n\nimport { DEFAULT_ID } from \"../utils/utils\";\n\nimport { AddModalProps } from \"../types/types\";\n\ninterface AddExpenseModalProps extends AddModalProps {\n    defaultCurrentId: string;\n}\n\nconst AddExpenseModal = ({ show, handleClose, defaultCurrentId }: AddExpenseModalProps) => {\n    // использование контекста\n    const { budgets, setExpense } = useAppContext();\n\n    // refs\n    const desctiptionRef = useRef<HTMLInputElement>({} as HTMLInputElement);\n    const amountRef = useRef<HTMLInputElement>({} as HTMLInputElement);\n    const currentIdRef = useRef<HTMLSelectElement>({} as HTMLSelectElement);\n\n    const handleSubmit = (element: React.FormEvent<HTMLFormElement>) => {\n        element.preventDefault();\n        setExpense({\n            description: desctiptionRef.current.value,\n            amount: parseInt(amountRef.current.value),\n            currentId: currentIdRef.current.value,\n        });\n        handleClose();\n    };\n\n    return (\n        <Modal show={show} onHide={handleClose}>\n            <Form onSubmit={handleSubmit}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Расходы</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form.Group className=\"mb-3\" controlId=\"description\">\n                        <Form.Label>Описание</Form.Label>\n                        <Form.Control ref={desctiptionRef} type=\"text\" required />\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"amount\">\n                        <Form.Label>Стоимость</Form.Label>\n                        <Form.Control ref={amountRef} type=\"text\" required />\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"currentId\">\n                        <Form.Label>Выбрать категорию расходов</Form.Label>\n                        <Form.Select defaultValue={defaultCurrentId} ref={currentIdRef}>\n                            <option>{DEFAULT_ID}</option>\n                            {budgets.map((budget) => {\n                                const { id, name } = budget;\n                                return (\n                                    <option key={id} value={id}>\n                                        {name}\n                                    </option>\n                                );\n                            })}\n                        </Form.Select>\n                    </Form.Group>\n                    <div className=\"d-flex justify-content-end\">\n                        <Button variant=\"primary\" type=\"submit\">\n                            Добавить\n                        </Button>\n                    </div>\n                </Modal.Body>\n            </Form>\n        </Modal>\n    );\n};\n\nexport default AddExpenseModal;\n","import { Modal, Stack, Button } from \"react-bootstrap\";\n\nimport { formatToRoubles, DEFAULT_ID } from \"../utils/utils\";\n\nimport { useAppContext } from \"../hooks/useAppContext\";\n\ninterface ViewExpenseModalProps {\n    currentId: string;\n    handleClose: () => void;\n}\n\nconst ViewExpenseModal = ({ currentId, handleClose }: ViewExpenseModalProps) => {\n    // использование контекста\n    const { budgets, getExpense, deleteBudget, deleteExpense } = useAppContext();\n\n    const expenses = getExpense(currentId);\n    const budget =\n        DEFAULT_ID === currentId\n            ? { name: \"По умолчанию\", id: DEFAULT_ID }\n            : budgets.find((budget) => budget.id === currentId);\n\n    return (\n        <Modal show={currentId?.length > 0} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>\n                    <Stack direction=\"horizontal\" gap={2}>\n                        <div>Категория - {budget?.name}</div>\n                        {currentId !== DEFAULT_ID && (\n                            <Button\n                                variant=\"outline-danger\"\n                                onClick={() => {\n                                    budget && deleteBudget(budget.id);\n                                    handleClose();\n                                }}\n                            >\n                                Удалить категорию\n                            </Button>\n                        )}\n                    </Stack>\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Stack gap={3}>\n                    {expenses.map((expense) => {\n                        const { id, description, amount } = expense;\n                        return (\n                            <Stack key={id} direction=\"horizontal\" gap={2}>\n                                <div className=\"me-auto fs-4\">{description}</div>\n                                <div className=\"fs-5\">{amount && formatToRoubles.format(amount)}</div>\n                                <Button size=\"sm\" variant=\"outline-danger\" onClick={() => deleteExpense(id)}>\n                                    &times;\n                                </Button>\n                            </Stack>\n                        );\n                    })}\n                </Stack>\n            </Modal.Body>\n        </Modal>\n    );\n};\n\nexport default ViewExpenseModal;\n","import { BudgetCard } from \".\";\nimport { useAppContext } from \"../hooks/useAppContext\";\n\nconst TotalBudgetCard = () => {\n    // использование контекста\n    const { expenses, budgets } = useAppContext();\n\n    const amount = expenses.reduce((acc, expense) => {\n        const { amount } = expense;\n        if (amount === undefined) return 0;\n        return acc + amount;\n    }, 0);\n\n    const max = budgets.reduce((acc, budget) => {\n        const { max } = budget;\n        if (max === undefined) return 0;\n        return acc + max;\n    }, 0);\n\n    if (max === 0) return null;\n\n    return <BudgetCard amount={amount} name=\"Всего\" max={max} hideButtons />;\n};\n\nexport default TotalBudgetCard;\n","import { BudgetCard } from \".\";\n\nimport { useAppContext } from \"../hooks/useAppContext\";\n\nimport { DEFAULT_ID } from \"../utils/utils\";\n\ninterface DefaultBudgetCardProps {\n    onAddExpenseClick: () => void;\n    onViewExpenseClick: () => void;\n}\n\nconst DefaultBudgetCard = ({ onAddExpenseClick, onViewExpenseClick }: DefaultBudgetCardProps) => {\n    // использование контекста\n    const { getExpense } = useAppContext();\n\n    const amount = getExpense(DEFAULT_ID).reduce((acc, expense) => {\n        const { amount } = expense;\n        if (amount === undefined) return 0;\n        return acc + amount;\n    }, 0);\n\n    if (amount === 0) return null;\n\n    return (\n        <BudgetCard\n            amount={amount}\n            name=\"По умолчанию\"\n            onAddExpenseClick={onAddExpenseClick}\n            onViewExpenseClick={onViewExpenseClick}\n        />\n    );\n};\n\nexport default DefaultBudgetCard;\n","import { Modal, Stack, Button } from \"react-bootstrap\";\n\nimport { useAppContext } from \"../hooks/useAppContext\";\n\nimport { AddModalProps } from \"../types/types\";\n\nconst ConfirmationModal = ({ show, handleClose }: AddModalProps) => {\n    const { removeEvthgFromLocaleStorage } = useAppContext();\n\n    const handleConfirmationClick = () => {\n        removeEvthgFromLocaleStorage();\n        handleClose();\n    };\n\n    return (\n        <Modal show={show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Удалить всё</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <div className=\"mb-4\">Вы действительно хотите удалить все записи? Это билет в один конец &#128512;.</div>\n                <Stack direction=\"horizontal\" gap={2} className=\"d-flex justify-content-end\">\n                    <Button variant=\"primary\" onClick={handleConfirmationClick}>\n                        Да, конечно!\n                    </Button>\n                    <Button variant=\"outline-secondary\" onClick={handleClose}>\n                        Я передумал.\n                    </Button>\n                </Stack>\n            </Modal.Body>\n        </Modal>\n    );\n};\n\nexport default ConfirmationModal;\n","import { useState } from \"react\";\n\nimport {\n    BudgetCard,\n    AddBudgetModal,\n    AddExpenseModal,\n    ViewExpenseModal,\n    TotalBudgetCard,\n    DefaultBudgetCard,\n    ConfirmationModal,\n} from \"../components\";\n\nimport { useAppContext } from \"../hooks/useAppContext\";\n\nimport { Container, Stack, Button } from \"react-bootstrap\";\n\nimport { DEFAULT_ID } from \"../utils/utils\";\n\nimport \"./Budget.css\";\n\nconst Budget = () => {\n    // модалки для меню\n    const [showAddBudgetModal, setShowAddBudgetModal] = useState(false);\n    const [showAddExpenseModal, setShowAddExpenseModal] = useState(false);\n    const [showConfirmationModal, setShowConfirmationModal] = useState(false);\n    // модалки для карточки затрат\n    const [addExpenseModalCurrentId, setAddExpenseModalCurrentId] = useState(\"\");\n    const [viewExpenseModalCurrentId, setViewExpenseModalCurrentId] = useState(\"\");\n\n    const openExpenseModal = (currentId: string) => {\n        setShowAddExpenseModal(true);\n        setAddExpenseModalCurrentId(currentId);\n    };\n\n    const openExpenseModalDefault = () => {\n        setShowAddExpenseModal(true);\n    };\n\n    // использование контекста\n    const { budgets, getExpense } = useAppContext();\n\n    return (\n        <>\n            <Container className=\"my-4\">\n                <Stack direction=\"horizontal\" gap={2} className=\"mb-4\">\n                    <h1 className=\"me-auto\">Бюджет</h1>\n                    <Button variant=\"primary\" onClick={() => setShowAddBudgetModal(true)}>\n                        Категория\n                    </Button>\n                    <Button variant=\"outline-primary\" onClick={() => setShowAddExpenseModal(true)}>\n                        Расходы\n                    </Button>\n                    <Button variant=\"outline-danger\" onClick={() => setShowConfirmationModal(true)}>\n                        Удалить всё\n                    </Button>\n                </Stack>\n                <div className=\"app-content\">\n                    {budgets.map((budget) => {\n                        const { id, name, max } = budget;\n                        const amount = getExpense(id).reduce((acc, expense) => {\n                            if (expense.amount === undefined) return 0;\n                            return acc + expense.amount;\n                        }, 0);\n                        return (\n                            <BudgetCard\n                                key={id}\n                                name={name}\n                                amount={amount}\n                                max={max}\n                                onAddExpenseClick={() => openExpenseModal(id)}\n                                onViewExpenseClick={() => setViewExpenseModalCurrentId(id)}\n                            />\n                        );\n                    })}\n                    <DefaultBudgetCard\n                        onAddExpenseClick={openExpenseModalDefault}\n                        onViewExpenseClick={() => setViewExpenseModalCurrentId(DEFAULT_ID)}\n                    />\n                    <TotalBudgetCard />\n                </div>\n            </Container>\n            <AddBudgetModal show={showAddBudgetModal} handleClose={() => setShowAddBudgetModal(false)} />\n            <ConfirmationModal show={showConfirmationModal} handleClose={() => setShowConfirmationModal(false)} />\n            <AddExpenseModal\n                show={showAddExpenseModal}\n                handleClose={() => setShowAddExpenseModal(false)}\n                defaultCurrentId={addExpenseModalCurrentId}\n            />\n            <ViewExpenseModal\n                currentId={viewExpenseModalCurrentId}\n                handleClose={() => setViewExpenseModalCurrentId(\"\")}\n            />\n        </>\n    );\n};\n\nexport default Budget;\n"],"names":["name","amount","max","onAddExpenseClick","onViewExpenseClick","hideButtons","Card","className","danger","light","opacity","getCardBGColor","formatToRoubles","ProgressBar","variant","ratio","getPBVariant","min","now","Stack","direction","gap","Button","onClick","useAppContext","useContext","AppContext","show","handleClose","addBudget","nameRef","useRef","maxRef","Modal","onHide","Form","onSubmit","element","preventDefault","current","value","parseInt","closeButton","controlId","ref","type","required","step","defaultCurrentId","budgets","setExpense","desctiptionRef","amountRef","currentIdRef","description","currentId","defaultValue","DEFAULT_ID","map","budget","id","getExpense","deleteBudget","deleteExpense","expenses","find","length","expense","size","reduce","acc","undefined","removeEvthgFromLocaleStorage","useState","showAddBudgetModal","setShowAddBudgetModal","showAddExpenseModal","setShowAddExpenseModal","showConfirmationModal","setShowConfirmationModal","addExpenseModalCurrentId","setAddExpenseModalCurrentId","viewExpenseModalCurrentId","setViewExpenseModalCurrentId","Container"],"sourceRoot":""}